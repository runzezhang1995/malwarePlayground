HEADER:0000000100000000 ;
HEADER:0000000100000000 ; +-------------------------------------------------------------------------+
HEADER:0000000100000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
HEADER:0000000100000000 ; |           Copyright (c) 2019 Hex-Rays, <support@hex-rays.com>           |
HEADER:0000000100000000 ; |                      License info: 48-BABB-7E64-E2                      |
HEADER:0000000100000000 ; |                     Georgia Institute of Technology                     |
HEADER:0000000100000000 ; +-------------------------------------------------------------------------+
HEADER:0000000100000000 ;
HEADER:0000000100000000 ; Input SHA256 : 2178483BA5CF1AA02C37B1C729F0AAC623FC38ACDA3790486CEFE2640A262971
HEADER:0000000100000000 ; Input MD5    : C900AB7FE1C3005DAD644366DD4B1FEE
HEADER:0000000100000000 ; Input CRC32  : 92D76E60
HEADER:0000000100000000
HEADER:0000000100000000
HEADER:0000000100000000                 .686p
HEADER:0000000100000000                 .mmx
HEADER:0000000100000000                 .model flat
HEADER:0000000100000000 .intel_syntax noprefix
HEADER:0000000100000000
HEADER:0000000100000000 ; ===========================================================================
HEADER:0000000100000000
HEADER:0000000100000000 ; [00000F50 BYTES: COLLAPSED SEGMENT HEADER. PRESS CTRL-NUMPAD+ TO EXPAND]
__text:0000000100000F50 ; ===========================================================================
__text:0000000100000F50
__text:0000000100000F50 ; Segment type: Pure code
__text:0000000100000F50 ; Segment permissions: Read/Execute
__text:0000000100000F50 __text          segment para public 'CODE' use64
__text:0000000100000F50                 assume cs:__text
__text:0000000100000F50                 ;org 100000F50h
__text:0000000100000F50                 assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
__text:0000000100000F50
__text:0000000100000F50 ; =============== S U B R O U T I N E =======================================
__text:0000000100000F50
__text:0000000100000F50 ; Attributes: bp-based frame
__text:0000000100000F50
__text:0000000100000F50 ; int __cdecl main(int argc, const char **argv, const char **envp)
__text:0000000100000F50                 public _main
__text:0000000100000F50 _main           proc near
__text:0000000100000F50
__text:0000000100000F50 var_10          = qword ptr -10h
__text:0000000100000F50 var_8           = dword ptr -8
__text:0000000100000F50 var_4           = dword ptr -4
__text:0000000100000F50
__text:0000000100000F50                 push    rbp             ; push previous stack base pointer
__text:0000000100000F51                 mov     rbp, rsp        ; set new rbp value with previous stack pointer value
__text:0000000100000F54                 sub     rsp, 10h        ; allocate stack size
__text:0000000100000F58                 mov     [rbp+var_4], 0  ; push 0 to stack
__text:0000000100000F5F                 mov     [rbp+var_8], edi ; push argc value to stack
__text:0000000100000F62                 mov     [rbp+var_10], rsi ; mov argv to stack
__text:0000000100000F66                 cmp     [rbp+var_8], 2  ; check if argc is 2. If not, jump to Quit block
__text:0000000100000F6A                 jnz     QUIT            ; set return value (at eax) to 0
__text:0000000100000F70                 mov     rax, [rbp+var_10] ; execute only has additional argument. move argument to rax
__text:0000000100000F74                 mov     rsi, [rax+8]    ; move string pointed by rax + 8 to rsi, as printf parameter
__text:0000000100000F78                 lea     rdi, aHelloS    ; load string template address to rdi
__text:0000000100000F7F                 mov     al, 0           ; set al to 0
__text:0000000100000F81                 call    _printf
__text:0000000100000F86
__text:0000000100000F86 QUIT:                                   ; CODE XREF: _main+1A↑j
__text:0000000100000F86                 xor     eax, eax        ; set return value (at eax) to 0
__text:0000000100000F88                 add     rsp, 10h        ; reset rsp to previous value
__text:0000000100000F8C                 pop     rbp             ; reset rbp to previous value
__text:0000000100000F8D                 retn                    ; end function and return value
__text:0000000100000F8D _main           endp
__text:0000000100000F8D
__text:0000000100000F8D __text          ends
__text:0000000100000F8D
__stubs:0000000100000F8E ; ===========================================================================
__stubs:0000000100000F8E
__stubs:0000000100000F8E ; Segment type: Pure code
__stubs:0000000100000F8E ; Segment permissions: Read/Execute
__stubs:0000000100000F8E __stubs         segment word public 'CODE' use64
__stubs:0000000100000F8E                 assume cs:__stubs
__stubs:0000000100000F8E                 ;org 100000F8Eh
__stubs:0000000100000F8E                 assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
__stubs:0000000100000F8E ; [00000006 BYTES: COLLAPSED FUNCTION _printf. PRESS CTRL-NUMPAD+ TO EXPAND]
__stub_helper:0000000100000F94 ; ---------------------------------------------------------------------------
__stub_helper:0000000100000F94 ; ===========================================================================
__stub_helper:0000000100000F94
__stub_helper:0000000100000F94 ; Segment type: Pure code
__stub_helper:0000000100000F94 ; Segment permissions: Read/Execute
__stub_helper:0000000100000F94 __stub_helper   segment dword public 'CODE' use64
__stub_helper:0000000100000F94                 assume cs:__stub_helper
__stub_helper:0000000100000F94                 ;org 100000F94h
__stub_helper:0000000100000F94                 assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
__stub_helper:0000000100000F94
__stub_helper:0000000100000F94 loc_100000F94:                          ; CODE XREF: __stub_helper:0000000100000FA9↓j
__stub_helper:0000000100000F94                 lea     r11, __dyld_private
__stub_helper:0000000100000F9B                 push    r11
__stub_helper:0000000100000F9D                 jmp     cs:dyld_stub_binder_ptr
__stub_helper:0000000100000F9D ; ---------------------------------------------------------------------------
__stub_helper:0000000100000FA3                 align 4
__stub_helper:0000000100000FA4                 push    0
__stub_helper:0000000100000FA9                 jmp     loc_100000F94
__stub_helper:0000000100000FA9 __stub_helper   ends
__stub_helper:0000000100000FA9
__cstring:0000000100000FAE ; ===========================================================================
__cstring:0000000100000FAE
__cstring:0000000100000FAE ; Segment type: Pure data
__cstring:0000000100000FAE ; Segment permissions: Read/Execute
__cstring:0000000100000FAE __cstring       segment byte public 'DATA' use64
__cstring:0000000100000FAE                 assume cs:__cstring
__cstring:0000000100000FAE                 ;org 100000FAEh
__cstring:0000000100000FAE ; char aHelloS[]
__cstring:0000000100000FAE aHelloS         db 'Hello %s',0Ah,0     ; DATA XREF: _main+28↑o
__cstring:0000000100000FAE __cstring       ends
__cstring:0000000100000FAE
__unwind_info:0000000100000FB8 ; ===========================================================================
__unwind_info:0000000100000FB8
__unwind_info:0000000100000FB8 ; Segment type: Regular
__unwind_info:0000000100000FB8 ; Segment permissions: Read/Execute
__unwind_info:0000000100000FB8 __unwind_info   segment dword public '' use64
__unwind_info:0000000100000FB8                 assume cs:__unwind_info
__unwind_info:0000000100000FB8                 ;org 100000FB8h
__unwind_info:0000000100000FB8                 assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
__unwind_info:0000000100000FB8                 db    1
__unwind_info:0000000100000FB9                 db    0
__unwind_info:0000000100000FBA                 db    0
__unwind_info:0000000100000FBB                 db    0
__unwind_info:0000000100000FBC                 db  1Ch
__unwind_info:0000000100000FBD                 db    0
__unwind_info:0000000100000FBE                 db    0
__unwind_info:0000000100000FBF                 db    0
__unwind_info:0000000100000FC0                 db    0
__unwind_info:0000000100000FC1                 db    0
__unwind_info:0000000100000FC2                 db    0
__unwind_info:0000000100000FC3                 db    0
__unwind_info:0000000100000FC4                 db  1Ch
__unwind_info:0000000100000FC5                 db    0
__unwind_info:0000000100000FC6                 db    0
__unwind_info:0000000100000FC7                 db    0
__unwind_info:0000000100000FC8                 db    0
__unwind_info:0000000100000FC9                 db    0
__unwind_info:0000000100000FCA                 db    0
__unwind_info:0000000100000FCB                 db    0
__unwind_info:0000000100000FCC                 db  1Ch
__unwind_info:0000000100000FCD                 db    0
__unwind_info:0000000100000FCE                 db    0
__unwind_info:0000000100000FCF                 db    0
__unwind_info:0000000100000FD0                 db    2
__unwind_info:0000000100000FD1                 db    0
__unwind_info:0000000100000FD2                 db    0
__unwind_info:0000000100000FD3                 db    0
__unwind_info:0000000100000FD4                 db  50h ; P
__unwind_info:0000000100000FD5                 db  0Fh
__unwind_info:0000000100000FD6                 db    0
__unwind_info:0000000100000FD7                 db    0
__unwind_info:0000000100000FD8                 db  34h ; 4
__unwind_info:0000000100000FD9                 db    0
__unwind_info:0000000100000FDA                 db    0
__unwind_info:0000000100000FDB                 db    0
__unwind_info:0000000100000FDC                 db  34h ; 4
__unwind_info:0000000100000FDD                 db    0
__unwind_info:0000000100000FDE                 db    0
__unwind_info:0000000100000FDF                 db    0
__unwind_info:0000000100000FE0                 db  8Fh
__unwind_info:0000000100000FE1                 db  0Fh
__unwind_info:0000000100000FE2                 db    0
__unwind_info:0000000100000FE3                 db    0
__unwind_info:0000000100000FE4                 db    0
__unwind_info:0000000100000FE5                 db    0
__unwind_info:0000000100000FE6                 db    0
__unwind_info:0000000100000FE7                 db    0
__unwind_info:0000000100000FE8                 db  34h ; 4
__unwind_info:0000000100000FE9                 db    0
__unwind_info:0000000100000FEA                 db    0
__unwind_info:0000000100000FEB                 db    0
__unwind_info:0000000100000FEC                 db    3
__unwind_info:0000000100000FED                 db    0
__unwind_info:0000000100000FEE                 db    0
__unwind_info:0000000100000FEF                 db    0
__unwind_info:0000000100000FF0                 db  0Ch
__unwind_info:0000000100000FF1                 db    0
__unwind_info:0000000100000FF2                 db    1
__unwind_info:0000000100000FF3                 db    0
__unwind_info:0000000100000FF4                 db  10h
__unwind_info:0000000100000FF5                 db    0
__unwind_info:0000000100000FF6                 db    1
__unwind_info:0000000100000FF7                 db    0
__unwind_info:0000000100000FF8                 db    0
__unwind_info:0000000100000FF9                 db    0
__unwind_info:0000000100000FFA                 db    0
__unwind_info:0000000100000FFB                 db    0
__unwind_info:0000000100000FFC                 db    0
__unwind_info:0000000100000FFD                 db    0
__unwind_info:0000000100000FFE                 db    0
__unwind_info:0000000100000FFF                 db    0
__unwind_info:0000000100000FFF __unwind_info   ends
__unwind_info:0000000100000FFF
__got:0000000100001000 ; ===========================================================================
__got:0000000100001000
__got:0000000100001000 ; Segment type: Pure data
__got:0000000100001000 ; Segment permissions: Read/Write
__got:0000000100001000 __got           segment qword public 'DATA' use64
__got:0000000100001000                 assume cs:__got
__got:0000000100001000                 ;org 100001000h
__got:0000000100001000 dyld_stub_binder_ptr dq offset dyld_stub_binder
__got:0000000100001000                                         ; DATA XREF: __stub_helper:0000000100000F9D↑r
__got:0000000100001000 __got           ends
__got:0000000100001000
__la_symbol_ptr:0000000100002000 ; ===========================================================================
__la_symbol_ptr:0000000100002000
__la_symbol_ptr:0000000100002000 ; Segment type: Pure data
__la_symbol_ptr:0000000100002000 ; Segment permissions: Read/Write
__la_symbol_ptr:0000000100002000 __la_symbol_ptr segment qword public 'DATA' use64
__la_symbol_ptr:0000000100002000                 assume cs:__la_symbol_ptr
__la_symbol_ptr:0000000100002000                 ;org 100002000h
__la_symbol_ptr:0000000100002000 ; int (*printf_ptr)(const char *, ...)
__la_symbol_ptr:0000000100002000 _printf_ptr     dq offset __imp__printf ; DATA XREF: _printf↑r
__la_symbol_ptr:0000000100002000 __la_symbol_ptr ends
__la_symbol_ptr:0000000100002000
__data:0000000100002008 ; ===========================================================================
__data:0000000100002008
__data:0000000100002008 ; Segment type: Pure data
__data:0000000100002008 ; Segment permissions: Read/Write
__data:0000000100002008 __data          segment qword public 'DATA' use64
__data:0000000100002008                 assume cs:__data
__data:0000000100002008                 ;org 100002008h
__data:0000000100002008 __dyld_private  db    0                 ; DATA XREF: __stub_helper:loc_100000F94↑o
__data:0000000100002009                 db    0
__data:000000010000200A                 db    0
__data:000000010000200B                 db    0
__data:000000010000200C                 db    0
__data:000000010000200D                 db    0
__data:000000010000200E                 db    0
__data:000000010000200F                 db    0
__data:000000010000200F __data          ends
__data:000000010000200F
UNDEF:0000000100002010 ;
UNDEF:0000000100002010 ; Imports from /usr/lib/libSystem.B.dylib
UNDEF:0000000100002010 ;
UNDEF:0000000100002010 ; ===========================================================================
UNDEF:0000000100002010
UNDEF:0000000100002010 ; Segment type: Externs
UNDEF:0000000100002010 ; UNDEF
UNDEF:0000000100002010                 extrn dyld_stub_binder:qword
UNDEF:0000000100002010                                         ; CODE XREF: __stub_helper:0000000100000F9D↑j
UNDEF:0000000100002010                                         ; DATA XREF: __got:dyld_stub_binder_ptr↑o
UNDEF:0000000100002018 ; int _printf(const char *, ...)
UNDEF:0000000100002018                 extrn __imp__printf:qword
UNDEF:0000000100002018                                         ; CODE XREF: _printf↑j
UNDEF:0000000100002018                                         ; DATA XREF: __la_symbol_ptr:_printf_ptr↑o
UNDEF:0000000100002018
UNDEF:0000000100002018
UNDEF:0000000100002018                 end _main
